import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import tkinter as tk
from tkinter import filedialog


# Funkcja do generowania sygnału WF
def generate_signal(U, a):
    return a * U


# Funkcja do wczytywania danych z pliku .xlsx
def load_data(filename):
    df = pd.read_excel(filename, header=None)  # Wczytaj dane bez uwzględniania nagłówków kolumn
    return df.iloc[:, 0], df.iloc[:, 1]  # Wczytaj pierwszą i drugą kolumnę


# Funkcja do inicjalizacji wykresu
def init_plot(max_displacement):
    fig, ax = plt.subplots()
    ax.set_xlabel('Time')
    ax.set_ylabel('WF(t)')
    ax.set_xlim(0, 20)  # Ustaw zakres osi x od 0 do 20 sekund
    ax.set_ylim(0, max_displacement)  # Ustaw zakres osi y zgodnie z podanym zakresem przesunięcia
    return fig, ax


# Funkcja do aktualizacji wykresu
def update_plot(frame, time, U, a, ax):
    ax.clear()
    ax.set_xlabel('Time')
    ax.set_ylabel('WF(t)')

    # Obliczenie współczynnika a na podstawie zakresu przesunięcia i napięcia
    max_U = max(U)
    max_displacement = max_U * a
    ax.set_xlim(max(0, time[frame] - 20), max(20, time[frame]))  # Przesuwamy okno, aby wyświetlić 20 ostatnich sekund

    # Rysowanie wykresu
    ax.plot(time[:frame], generate_signal(U[:frame], a), color='blue')
    plt.pause(0.01)  # Pozwól na odświeżenie wykresu


# Funkcja do obsługi przycisku wyboru pliku
def select_file():
    a_str = entry_a.get()  # Pobierz wartość współczynnika 'a' z pola Entry jako string
    if a_str.strip():  # Sprawdź, czy string nie jest pusty po usunięciu białych znaków
        a = float(a_str)  # Konwertuj wartość współczynnika 'a' na float
        max_displacement_str = entry_max_displacement.get()  # Pobierz wartość maksymalnego przesunięcia WF z pola Entry jako string
        if max_displacement_str.strip():  # Sprawdź, czy string nie jest pusty po usunięciu białych znaków
            max_displacement = float(max_displacement_str)  # Konwertuj wartość maksymalnego przesunięcia WF na float
            filename = filedialog.askopenfilename(filetypes=[('Excel files', '*.xlsx')])
            time, U = load_data(filename)
            fig, ax = init_plot(max_displacement)
            ani = FuncAnimation(fig, update_plot, frames=len(time), fargs=(time, U, a, ax))
            plt.show()
        else:
            tk.messagebox.showerror("Error", "Please enter a value for maximum displacement.")
    else:
        tk.messagebox.showerror("Error", "Please enter a value for coefficient 'a'.")


# Interfejs użytkownika
root = tk.Tk()
root.title('Real-time WF(t) Plot')

label_a = tk.Label(root, text='Enter the value of coefficient a:')
label_a.pack()

entry_a = tk.Entry(root)
entry_a.pack()

label_max_displacement = tk.Label(root, text='Enter the maximum displacement:')
label_max_displacement.pack()

entry_max_displacement = tk.Entry(root)
entry_max_displacement.pack()

select_button = tk.Button(root, text='Select File', command=select_file)
select_button.pack()

root.mainloop()
