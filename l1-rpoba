import tkinter as tk
from tkinter import filedialog
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import pandas as pd

class RealTimePlotApp:
    def __init__(self, root):
        # Inicjalizacja aplikacji
        self.root = root
        self.root.title("Real-Time Plot App")

        # Tworzenie obiektu figurki i osi wykresu
        self.fig, self.ax = plt.subplots()
        self.line1, = self.ax.plot([], [], label='V1') # Linia dla sygnału V1
        self.line2, = self.ax.plot([], [], label='V2') # Linia dla sygnału V2
        self.ax.legend() # Dodanie legendy

        # Inicjalizacja stanu pauzy
        self.pause = False

        # Tworzenie płótna do wyświetlania wykresu
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.root)
        self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

        # Tworzenie paska narzędzi do nawigacji po wykresie
        self.toolbar = NavigationToolbar2Tk(self.canvas, self.root)
        self.toolbar.update()
        self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

        # Dodanie przycisku pauzy
        self.pause_button = tk.Button(self.root, text="Pause", command=self.toggle_pause)
        self.pause_button.pack()

        # Dodanie przycisku wczytywania pliku
        self.load_button = tk.Button(self.root, text="Load File", command=self.load_file)
        self.load_button.pack()

        # Inicjalizacja animacji wykresu
        self.animation = FuncAnimation(self.fig, self.update_plot, interval=100)

    def load_file(self):
        # Funkcja do wczytywania pliku
        file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if file_path:
            self.data = pd.read_csv(file_path, delimiter='\t') # Wczytanie danych z pliku

    def update_plot(self, frame):
        # Funkcja aktualizująca wykres
        if hasattr(self, 'data') and not self.pause: # Sprawdzenie czy dane istnieją i czy pauza nie jest aktywna
            self.line1.set_data(self.data['Time'], self.data['V1']) # Ustawienie danych dla sygnału V1
            self.line2.set_data(self.data['Time'], self.data['V2']) # Ustawienie danych dla sygnału V2
            self.ax.relim() # Zaktualizowanie limitów osi
            self.ax.autoscale_view() # Automatyczne skalowanie osi
            return self.line1, self.line2

    def toggle_pause(self):
        # Funkcja do przełączania pauzy
        self.pause = not self.pause
        if self.pause:
            self.pause_button.config(text="Resume") # Zmiana tekstu przycisku na "Resume" jeśli pauza jest aktywna
        else:
            self.pause_button.config(text="Pause") # Zmiana tekstu przycisku na "Pause" jeśli pauza nie jest aktywna

if __name__ == "__main__":
    # Główna pętla aplikacji
    root = tk.Tk()
    app = RealTimePlotApp(root)
    root.mainloop()
